(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{545:function(_,v,e){"use strict";e.r(v);var t=e(6),i=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[_._v("前言")]),_._v(" "),e("p",[_._v("TCP协议在传世数据的时候，客户端（Client）和服务端（Server）会建立连接，然后把需要传输的文件进行分段，以及提供可靠的传输和流量控制！在数据传输完成后，当前的会话也要断开连接，避免资源浪费。所有TCP的三次握手就是建立连接的过程，而四次挥手是断开连接的过程！")]),_._v(" "),e("h2",{attrs:{id:"tcp基本认识"}},[_._v("TCP基本认识")]),_._v(" "),e("p",[e("strong",[_._v("传输控制协议")]),_._v("（英语："),e("strong",[_._v("T")]),_._v("ransmission "),e("strong",[_._v("C")]),_._v("ontrol "),e("strong",[_._v("P")]),_._v("rotocol，缩写："),e("strong",[_._v("TCP")]),_._v("）是一种面向连接的、可靠的、基于==字节流==的==传输层==通信协议")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://image.icelo.cn/image-tcp-6.jpg#mirages-width=1053&mirages-height=828&mirages-cdn-type=1",alt:"img"}})]),_._v(" "),e("p",[_._v("TCP头格式")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("序列号：在建立连接时由计算机生成的随机数作为初始值，通过"),e("code",[_._v("SYN")]),_._v("包传给接收端主机，每发送一次，就累加一次该字节数大小。==用来解决网络包乱序问题==")])]),_._v(" "),e("li",[e("p",[_._v("确认应答信号：指下一次 [ 期望 ] 收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。==用来解决不丢包的问题==")])]),_._v(" "),e("li",[e("p",[_._v("控制位")]),_._v(" "),e("p",[e("code",[_._v("ACK")]),_._v("：该位为"),e("code",[_._v("1")]),_._v("时，==确定应答==字段变为有效，TCP规定除了最初建立连接时的"),e("code",[_._v("SYN")]),_._v("包之外该位必须设置位"),e("code",[_._v("1")])]),_._v(" "),e("p",[e("code",[_._v("RST")]),_._v("：该位为"),e("code",[_._v("1")]),_._v("时，表示TCP连接时出现异常必须强制断开连接")]),_._v(" "),e("p",[e("code",[_._v("SYN")]),_._v("：该位为"),e("code",[_._v("1")]),_._v("时，表示希望建立连接，并在其==序列号==的字段进行序列号初始值的设定")]),_._v(" "),e("p",[e("code",[_._v("FIN")]),_._v("：该位为"),e("code",[_._v("1")]),_._v("时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换"),e("code",[_._v("FIN")]),_._v("位为1的TCP段。")])])]),_._v(" "),e("h2",{attrs:{id:"三次握手"}},[_._v("三次握手")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("第一次握手：建立连接时，客户端A发送SYN包("),e("code",[_._v("SEQ_NUMBER=x")]),_._v(")到服务器B，并进入SYN_SEND状态，等待服务器B确认。")])]),_._v(" "),e("li",[e("p",[_._v("第二次握手：服务器B收到SYN包，必须确认客户A的"),e("code",[_._v("SYN(ACK_NUMBER=x+1)")]),_._v("，同时自己也发送一个SYN包"),e("code",[_._v("(SEQ_NUMBER=y)")]),_._v("，即SYN+ACK包，此时服务器B进入SYN_RECV状态。")])]),_._v(" "),e("li",[e("p",[_._v("第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包"),e("code",[_._v("ACK(ACK_NUMBER=y+1)")]),_._v("，此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。")])]),_._v(" "),e("li",[e("p",[_._v("完成三次握手，客户端与服务器开始传送数据。")])])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://image.icelo.cn/image-20210416134526300.png#mirages-width=485&mirages-height=357&mirages-cdn-type=1",alt:"image-20210416134526300"}})]),_._v(" "),e("h2",{attrs:{id:"四次挥手"}},[_._v("四次挥手")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("第一次挥手：客户端打算关闭连接，此时会发送一个TCP首部"),e("code",[_._v("FIN")]),_._v("标志位设置为"),e("code",[_._v("1")]),_._v("，其序列号为前面已经传送过来的数据的最后一个字节的序号加1"),e("code",[_._v("(seq=x)")])])]),_._v(" "),e("li",[e("p",[_._v("第二次挥手：客户端收到报文后，就向客户端发送"),e("code",[_._v("ACK")]),_._v("应答报文，"),e("code",[_._v("ACK=1，ack=x+1")]),_._v("，并且带上自己的序列号"),e("code",[_._v("seq=y")]),_._v("，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。")])]),_._v(" "),e("li",[e("p",[_._v("客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。")])]),_._v(" "),e("li",[e("p",[_._v("第三次挥手：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，"),e("code",[_._v("FIN=1，ack=x+1")]),_._v("，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为"),e("code",[_._v("seq=z")]),_._v("，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。")])]),_._v(" "),e("li",[e("p",[_._v("第四次挥手：客户端收到服务器的连接释放报文后，必须发出确认，"),e("code",[_._v("ACK=1，ack=z+1")]),_._v("，而自己的序列号是"),e("code",[_._v("seq=h")]),_._v("，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过最长报文段寿命的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。")])]),_._v(" "),e("li",[e("p",[_._v("服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。")])])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://image.icelo.cn/image-20210416171743264.png#mirages-width=437&mirages-height=398&mirages-cdn-type=1",alt:"image-20210416171743264"}})]),_._v(" "),e("h2",{attrs:{id:"为什么不能使用两次握手进行连接"}},[_._v("为什么不能使用两次握手进行连接？")]),_._v(" "),e("p",[_._v("答：三次握手完成两个重要的功能，既要双方做好发送数据的准备工作，也要知道双方都知道彼此已准备好！如果改为两次握手会导致==死锁==的问题。假定客户端给服务端发送一个连接请求，服务端收到了这个分组，并发送了确认应答分组。按照两次握手的协定，服务端认为连接已经成功地建立了，可以开始发送数据分组。可是，服务端的应答信号在传输中被丢失的情况下，客户端还不知道服务端是否已准备好，不知道服务端将建立什么样的序列号，客户端甚至怀疑服务端是否收到自己的连接请求分组。在这种情况下，客户端认为连接还未建立成功，将忽略服务器发来的任何数据分组，只等待连接确认应答分组。而服务端在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。")]),_._v(" "),e("h2",{attrs:{id:"四次挥手中的第二、三次合并起来会发生什么"}},[_._v("四次挥手中的第二、三次合并起来会发生什么？")]),_._v(" "),e("p",[_._v("答：因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复ACK，表示接收到了断开连接的请求。等到数据发完之后再发FIN，断开服务器到客户端的数据传送。")]),_._v(" "),e("p",[_._v("只有等到服务端所有的报文都发送完了，才能发送FIN报文，因此不能一起发送。故需要四次挥手。")])])}),[],!1,null,null,null);v.default=i.exports}}]);